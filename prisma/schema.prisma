generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @unique
  name String
  email String @unique
  password String
  status UserStatus @default(PENDING)
  role UserRole @default(USER)
  two_factor_secret String?
  is2FAEnabled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  goals Goals[]
  family_as_admin Family? @relation("Family_Admin")
  family Family? @relation("Family_Member", fields: [familyId], references: [id], onDelete: SetNull)
  familyId String?
  transactions Transactions[]
  budgets Budget[]
  investments Investment[]
  payments Payment[]
  debt_plans DebtPlan[]
  notifications Notification[]
  audit_logs AuditLog[]
  @@index([email])
}

model Family {
  id        String    @id @default(cuid())
  name      String
  admin_id  String
  admin     User   @relation("Family_Admin", fields: [admin_id], references: [id])
  members   User[]  @relation("Family_Member")
  budgets   Budget[]
  tokens    Token[]
  transactions Transactions[]
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  @@index([name])
  @@index([admin_id])

  @@unique([admin_id])
}

model Token {
  id String @id @default(cuid()) @unique
  user_id String?
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token String
  type TokenType
  family_id String? 
  member_id String?
  family Family? @relation(fields: [family_id], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  expiresAt DateTime
  @@index([user_id])
  @@index([token])
  @@unique([user_id, type])
  @@unique([token, type])
}

model Goals {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name String
  target_amount Decimal @db.Decimal(15, 2)
  current_amount Decimal @db.Decimal(15, 2)
  deadline DateTime?
  createdAt DateTime @default(now())
  @@index([user_id])
}

model Transactions {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  family Family? @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId String?
  amount Decimal @db.Decimal(15, 2)
  category String
  description String?
  date DateTime
  is_recurring Boolean @default(false)
  source String @default("manual")
  createdAt DateTime @default(now())
  @@index([user_id])
  @@index([date])
  @@index([familyId])
}

model Budget {
  id String @id @default(cuid())
  user_id String?
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  family Family? @relation(fields: [familyId], references: [id], onDelete: Cascade)
  familyId String?
  category String
  limit_amount Decimal @db.Decimal(15, 2)
  month DateTime
  createdAt DateTime @default(now())
  @@index([user_id], name: "idx_user_id")
  @@index([familyId], name: "idx_familyId")
  @@index([user_id, familyId], name: "idx_user_id_or_familyId")
}

model Investment {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  symbol String
  quantity Decimal @db.Decimal(15, 4)
  purchase_price Decimal @db.Decimal(15, 2)
  purchase_date DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@index([user_id])
}

model Payment {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  amount Decimal @db.Decimal(15, 2)
  recipient String
  stripe_payment_id String?
  status PaymentStatus
  createdAt DateTime @default(now())
  @@index([user_id])
}

model DebtPlan {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  debt_name String
  amount Decimal @db.Decimal(15, 2)
  interest_rate Decimal @db.Decimal(5, 2)
  strategy DebtStrategy
  createdAt DateTime @default(now())
  @@index([user_id])
}


model Notification {
  id String @id @default(cuid())
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type NotificationType
  message String
  sentAt DateTime @default(now())
  @@index([user_id])
}

model AuditLog {
  id String @id @default(cuid())
  user_id String?
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  action String
  details Json
  createdAt DateTime @default(now())
  @@index([user_id])
}

enum UserStatus {
  PENDING
  ACTIVE
}

enum UserRole {
  USER
  ADMIN
  FAMILY_ADMIN
}

enum TokenType {
  REFRESH
  CONFIRMATION
  FAMILY
  RESET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DebtStrategy {
  SNOWBALL
  AVALANCHE
}

enum NotificationType {
  EMAIL
  PUSH
}